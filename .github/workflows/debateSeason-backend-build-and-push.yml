name: Backend Build, Test, and Push

on:
  pull_request:
    # main 브랜치에 pull request 될 때 워크플로우가 실행
    branches: [ main ]
  pull_request_target:
    types: [ closed ]
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x demo/gradlew
      - name: Build with Gradle
        run: cd demo && ./gradlew build -x test
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: demo/build/libs/*.jar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x demo/gradlew
      - name: Run tests
        run: cd demo && ./gradlew test

  build-and-push:
    needs: [build, test]
    # 가장 최신의 Ubuntu 러너를 사용
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      # 현재 리포지토리를 체크아웃
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      # Docker Buildx를 설정
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
      uses: docker/login-action@v3
      with:
        # GitHub Secret에서 Docker Hub 사용자 이름을 가져옴
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        # GitHub Secret에서 Docker Hub 액세스 토큰을 가져옴
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push
      if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
      uses: docker/build-push-action@v6
      with:
        # Dockerfile이 있는 위치
        context: ./demo
        # 이미지 빌드를 위한 Dockerfile의 경로
        file: ./demo/Dockerfile
        push: true
        # 다중 태그 사용: github.sha(커밋 id), latest(최신 버전 참조용)
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/github_actions:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/github_actions:latest
        platforms: linux/amd64,linux/arm64